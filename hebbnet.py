# -*- coding: utf-8 -*-
"""Hebb Net

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1usZyIYaYEw9mV7hJfKoeA7SeIOh3mPSj

# Hebb Net

### Fungsi Step Bipolar
"""

import numpy as np


def bipstep(y, th=0):
    return 1 if y >= th else -1

"""### Fungsi untuk *Plotting*"""

import matplotlib.pyplot as plt

def line(w, th=0):
    w2 = w[2] + .001 if w[2] == 0 else w[2]

    return lambda x: (th - w[1] * x - w[0]) / w2


def plot(f, s, t):
    x = np.arange(-2, 3)
    col = 'ro', 'bo'

    for c, v in enumerate(np.unique(t)):
        p = s[np.where(t == v)]

        plt.plot(p[:,1], p[:,2], col[c])

    plt.axis([-2, 2, -2, 2])
    plt.plot(x, f(x))
    plt.show()

"""### Fungsi Training Hebb"""

def hebb_train(s, t, draw=False):
    w = np.zeros(len(s[0]) + 1)
    b = np.ones((len(s), 1))
    s = np.hstack((b, s))

    for r, row in enumerate(s):
        w = [w[i] + row[i] * t[r] for i in range(len(row))]

        print('Bobot: {}'.format(w))

        if draw:
            plot(line(w, 0), s, t)

    return w

"""### Fungsi Testing Hebb"""

def hebb_test(x, w):
    y_in = w[0] + np.dot(x, w[1:])
    y_out = bipstep(y_in)

    return y_out

"""### Logika AND"""

train = [1, 1], [1, -1], [-1, 1], [-1, -1]
target = 1, -1, -1, -1
w = hebb_train(train, target, True)

print(hebb_test([1, 1], w))
print(hebb_test([1, -1], w))
print(hebb_test([-1, 1], w))
print(hebb_test([-1, -1], w))

"""### Logika OR"""

train = [1, 1], [1, -1], [-1, 1], [-1, -1]
target = 1, 1, 1, -1
w = hebb_train(train, target, True)

print(hebb_test([1, 1], w))
print(hebb_test([1, -1], w))
print(hebb_test([-1, 1], w))
print(hebb_test([-1, -1], w))

